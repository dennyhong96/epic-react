(this["webpackJsonpreact-hooks"]=this["webpackJsonpreact-hooks"]||[]).push([[42],{186:function(e,n,a){"use strict";a.d(n,"a",(function(){return d}));var t=a(1),o=a.n(t);function s(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function p(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){s(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function c(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},s=Object.keys(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var i=o.a.createContext({}),l=function(e){var n=o.a.useContext(i),a=n;return e&&(a="function"===typeof e?e(n):p(p({},n),e)),a},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},h=o.a.forwardRef((function(e,n){var a=e.components,t=e.mdxType,s=e.originalType,r=e.parentName,i=c(e,["components","mdxType","originalType","parentName"]),h=l(a),d=t,m=h["".concat(r,".").concat(d)]||h[d]||u[d]||s;return a?o.a.createElement(m,p(p({ref:n},i),{},{components:a})):o.a.createElement(m,p({ref:n},i))}));function d(e,n){var a=arguments,t=n&&n.mdxType;if("string"===typeof e||t){var s=a.length,r=new Array(s);r[0]=h;var p={};for(var c in n)hasOwnProperty.call(n,c)&&(p[c]=n[c]);p.originalType=e,p.mdxType="string"===typeof e?e:t,r[1]=p;for(var i=2;i<s;i++)r[i]=a[i];return o.a.createElement.apply(null,r)}return o.a.createElement.apply(null,a)}h.displayName="MDXCreateElement"},207:function(e,n,a){"use strict";a.r(n),a.d(n,"readingTime",(function(){return r})),a.d(n,"default",(function(){return c})),a.d(n,"tableOfContents",(function(){return i})),a.d(n,"frontMatter",(function(){return l}));var t=a(42),o=(a(1),a(186)),s=["components"],r={text:"9 min read",minutes:8.325,time:499500,words:1665},p={};function c(e){var n=e.components,a=Object(t.a)(e,s);return Object(o.a)("wrapper",Object.assign({},p,a,{components:n,mdxType:"MDXLayout"}),Object(o.a)("h1",{id:"useeffect-http-requests"},"useEffect: HTTP requests"),Object(o.a)("h2",{id:"-your-notes"},"\ud83d\udcdd Your Notes"),Object(o.a)("p",null,"Elaborate on your learnings here in ",Object(o.a)("inlineCode",{parentName:"p"},"src/exercise/06.md")),Object(o.a)("h2",{id:"background"},"Background"),Object(o.a)("p",null,"HTTP requests are another common side-effect that we need to do in applications.\nThis is no different from the side-effects we need to apply to a rendered DOM or\nwhen interacting with browser APIs like localStorage. In all these cases, we do\nthat within a ",Object(o.a)("inlineCode",{parentName:"p"},"useEffect")," hook callback. This hook allows us to ensure that\nwhenever certain changes take place, we apply the side-effects based on those\nchanges."),Object(o.a)("p",null,"One important thing to note about the ",Object(o.a)("inlineCode",{parentName:"p"},"useEffect")," hook is that you cannot return\nanything other than the cleanup function. This has interesting implications with\nregard to async/await syntax:"),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-javascript","data-language":"javascript","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token comment">// this does not work, don\'t do this:</span>\nReact<span class="token punctuation">.</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">doSomeAsyncThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token comment">// do something with the result</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n'}})),Object(o.a)("p",null,"The reason this doesn\u2019t work is because when you make a function async, it\nautomatically returns a promise (whether you\u2019re not returning anything at all,\nor explicitly returning a function). This is due to the semantics of async/await\nsyntax. So if you want to use async/await, the best way to do that is like so:"),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-javascript","data-language":"javascript","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'React<span class="token punctuation">.</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">doSomeAsyncThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token comment">// do something with the result</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n'}})),Object(o.a)("p",null,"This ensures that you don\u2019t return anything but a cleanup function."),Object(o.a)("p",null,"\ud83e\udd89 I find that it\u2019s typically just easier to extract all the async code into a\nutility function which I call and then use the promise-based ",Object(o.a)("inlineCode",{parentName:"p"},".then")," method\ninstead of using async/await syntax:"),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-javascript","data-language":"javascript","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'React<span class="token punctuation">.</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token function">doSomeAsyncThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// do something with the result</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n'}})),Object(o.a)("p",null,"But how you prefer to do this is totally up to you :)"),Object(o.a)("h2",{id:"exercise"},"Exercise"),Object(o.a)("p",null,"Production deploys:"),Object(o.a)("ul",null,Object(o.a)("li",{parentName:"ul"},Object(o.a)("a",{parentName:"li",href:"https://react-hooks.netlify.app/isolated/exercise/06.js"},"Exercise")),Object(o.a)("li",{parentName:"ul"},Object(o.a)("a",{parentName:"li",href:"https://react-hooks.netlify.app/isolated/final/06.js"},"Final"))),Object(o.a)("p",null,"In this exercise, we\u2019ll be doing data fetching directly in a useEffect hook\ncallback within our component."),Object(o.a)("p",null,"Here we have a form where users can enter the name of a pokemon and fetch data\nabout that pokemon. Your job will be to create a component which makes that\nfetch request. When the user submits a pokemon name, our ",Object(o.a)("inlineCode",{parentName:"p"},"PokemonInfo")," component\nwill get re-rendered with the ",Object(o.a)("inlineCode",{parentName:"p"},"pokemonName")),Object(o.a)("h2",{id:"extra-credit"},"Extra Credit"),Object(o.a)("h3",{id:"1--handle-errors"},"1. \ud83d\udcaf handle errors"),Object(o.a)("p",null,Object(o.a)("a",{parentName:"p",href:"https://react-hooks.netlify.app/isolated/final/06.extra-1.js"},"Production deploy")),Object(o.a)("p",null,"Unfortunately, sometimes things go wrong and we need to handle errors when they\ndo so we can show the user useful information. Handle that error and render it\nout like so:"),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-jsx","data-language":"jsx","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>alert<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n  There was an error: </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>whiteSpace<span class="token operator">:</span> <span class="token string">\'normal\'</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>error<span class="token punctuation">.</span>message<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span><span class="token plain-text">\n</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n'}})),Object(o.a)("p",null,"You can make an error happen by typing an incorrect pokemon name into the input."),Object(o.a)("p",null,"One common question I get about this extra credit is how to handle promise\nerrors. There are two ways to do it in this extra credit:"),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-javascript","data-language":"javascript","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token comment">// option 1: using .catch</span>\n<span class="token function">fetchPokemon</span><span class="token punctuation">(</span>pokemonName<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">pokemon</span> <span class="token operator">=></span> <span class="token function">setPokemon</span><span class="token punctuation">(</span>pokemon<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=></span> <span class="token function">setError</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// option 2: using the second argument to .then</span>\n<span class="token function">fetchPokemon</span><span class="token punctuation">(</span>pokemonName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>\n  <span class="token parameter">pokemon</span> <span class="token operator">=></span> <span class="token function">setPokemon</span><span class="token punctuation">(</span>pokemon<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token parameter">error</span> <span class="token operator">=></span> <span class="token function">setError</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>\n'}})),Object(o.a)("p",null,"These are functionally equivalent for our purposes, but they are semantically\ndifferent in general."),Object(o.a)("p",null,"Using ",Object(o.a)("inlineCode",{parentName:"p"},".catch")," means that you\u2019ll handle an error in the ",Object(o.a)("inlineCode",{parentName:"p"},"fetchPokemon")," promise,\nbut you\u2019ll ",Object(o.a)("em",{parentName:"p"},"also")," handle an error in the ",Object(o.a)("inlineCode",{parentName:"p"},"setPokemon(pokemon)")," call as well.\nThis is due to the semantics of how promises work."),Object(o.a)("p",null,"Using the second argument to ",Object(o.a)("inlineCode",{parentName:"p"},".then")," means that you will catch an error that\nhappens in ",Object(o.a)("inlineCode",{parentName:"p"},"fetchPokemon")," only. In this case, I knew that calling ",Object(o.a)("inlineCode",{parentName:"p"},"setPokemon"),"\nwould not throw an error (React handles errors and we have an API to catch those\nwhich we\u2019ll use later), so I decided to go with the second argument option."),Object(o.a)("p",null,"However, in this situation, it doesn\u2019t really make much of a difference. If you\nwant to go with the safe option, then opt for ",Object(o.a)("inlineCode",{parentName:"p"},".catch"),"."),Object(o.a)("h3",{id:"2--use-a-status"},"2. \ud83d\udcaf use a status"),Object(o.a)("p",null,Object(o.a)("a",{parentName:"p",href:"https://react-hooks.netlify.app/isolated/final/06.extra-2.js"},"Production deploy")),Object(o.a)("p",null,"Our logic for what to show the user when is kind of convoluted and requires that\nwe be really careful about which state we set and when."),Object(o.a)("p",null,'We could make things much simpler by having some state to set the explicit\nstatus of our component. Our component can be in the following "states":'),Object(o.a)("ul",null,Object(o.a)("li",{parentName:"ul"},Object(o.a)("inlineCode",{parentName:"li"},"idle"),": no request made yet"),Object(o.a)("li",{parentName:"ul"},Object(o.a)("inlineCode",{parentName:"li"},"pending"),": request started"),Object(o.a)("li",{parentName:"ul"},Object(o.a)("inlineCode",{parentName:"li"},"resolved"),": request successful"),Object(o.a)("li",{parentName:"ul"},Object(o.a)("inlineCode",{parentName:"li"},"rejected"),": request failed")),Object(o.a)("p",null,"Try to use a status state by setting it to these string values rather than\nrelying on existing state or booleans."),Object(o.a)("p",null,"Learn more about this concept here:\n",Object(o.a)("a",{parentName:"p",href:"https://kentcdodds.com/blog/stop-using-isloading-booleans"},"https://kentcdodds.com/blog/stop-using-isloading-booleans")),Object(o.a)("p",null,"\ud83d\udcb0 Warning: Make sure you call ",Object(o.a)("inlineCode",{parentName:"p"},"setPokemon")," before calling ",Object(o.a)("inlineCode",{parentName:"p"},"setStatus"),". We\u2019ll\naddress that more in the next extra credit."),Object(o.a)("h3",{id:"3--store-the-state-in-an-object"},"3. \ud83d\udcaf store the state in an object"),Object(o.a)("p",null,Object(o.a)("a",{parentName:"p",href:"https://react-hooks.netlify.app/isolated/final/06.extra-3.js"},"Production deploy")),Object(o.a)("p",null,"You\u2019ll notice that we\u2019re calling a bunch of state updaters in a row. This is\nnormally not a problem, but each call to our state updater can result in a\nre-render of our component. React normally batches these calls so you only get a\nsingle re-render, but it\u2019s unable to do this in an asynchronous callback (like\nour promise success and error handlers)."),Object(o.a)("p",null,"So you might notice that if you do this:"),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-javascript","data-language":"javascript","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token string">\'resolved\'</span><span class="token punctuation">)</span>\n<span class="token function">setPokemon</span><span class="token punctuation">(</span>pokemon<span class="token punctuation">)</span>\n'}})),Object(o.a)("p",null,"You\u2019ll get an error indicating that you cannot read ",Object(o.a)("inlineCode",{parentName:"p"},"image")," of ",Object(o.a)("inlineCode",{parentName:"p"},"null"),". This is\nbecause the ",Object(o.a)("inlineCode",{parentName:"p"},"setStatus")," call results in a re-render that happens before the\n",Object(o.a)("inlineCode",{parentName:"p"},"setPokemon")," happens."),Object(o.a)("p",null,"In the future, you\u2019ll learn about how ",Object(o.a)("inlineCode",{parentName:"p"},"useReducer")," can solve this problem really\nelegantly, but we can still accomplish this by storing our state as an object\nthat has all the properties of state we\u2019re managing."),Object(o.a)("p",null,"See if you can figure out how to store all of your state in a single object with\na single ",Object(o.a)("inlineCode",{parentName:"p"},"React.useState")," call so I can update my state like this:"),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-javascript","data-language":"javascript","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>status<span class="token operator">:</span> <span class="token string">\'resolved\'</span><span class="token punctuation">,</span> pokemon<span class="token punctuation">}</span><span class="token punctuation">)</span>\n'}})),Object(o.a)("h3",{id:"4--create-an-errorboundary-component"},"4. \ud83d\udcaf create an ErrorBoundary component"),Object(o.a)("p",null,Object(o.a)("a",{parentName:"p",href:"https://react-hooks.netlify.app/isolated/final/06.extra-4.js"},"Production deploy")),Object(o.a)("p",null,"We\u2019ve already solved the problem for errors in our request, we\u2019re only handling\nthat one error. But there are a lot of different kinds of errors that can happen\nin our applications."),Object(o.a)("p",null,"No matter how hard you try, eventually your app code just isn\u2019t going to behave\nthe way you expect it to and you\u2019ll need to handle those exceptions. If an error\nis thrown and unhandled, your application will be removed from the page, leaving\nthe user with a blank screen\u2026 Kind of awkward\u2026"),Object(o.a)("p",null,"Luckily for us, there\u2019s a simple way to handle errors in your application using\na special kind of component called an\n",Object(o.a)("a",{parentName:"p",href:"https://reactjs.org/docs/error-boundaries.html"},"Error Boundary"),". Unfortunately,\nthere is currently no way to create an Error Boundary component with a function\nand you have to use a class component instead."),Object(o.a)("p",null,"In this extra credit, read up on ErrorBoundary components, and try to create one\nthat handles this and any other error for the ",Object(o.a)("inlineCode",{parentName:"p"},"PokemonInfo")," component."),Object(o.a)("p",null,"\ud83d\udcb0 to make your error boundary component handle errors from the ",Object(o.a)("inlineCode",{parentName:"p"},"PokemonInfo"),"\ncomponent, instead of rendering the error within the ",Object(o.a)("inlineCode",{parentName:"p"},"PokemonInfo")," component,\nyou\u2019ll need to ",Object(o.a)("inlineCode",{parentName:"p"},"throw error")," right in the function so React can hand that to the\nerror boundary. So ",Object(o.a)("inlineCode",{parentName:"p"},"if (status === 'rejected') throw error"),"."),Object(o.a)("h3",{id:"5--re-mount-the-error-boundary"},"5. \ud83d\udcaf re-mount the error boundary"),Object(o.a)("p",null,Object(o.a)("a",{parentName:"p",href:"https://react-hooks.netlify.app/isolated/final/06.extra-5.js"},"Production deploy")),Object(o.a)("p",null,"You might notice that with the changes we\u2019ve added, we now cannot recover from\nan error. For example:"),Object(o.a)("ol",null,Object(o.a)("li",{parentName:"ol"},"Type an incorrect pokemon"),Object(o.a)("li",{parentName:"ol"},"Notice the error"),Object(o.a)("li",{parentName:"ol"},"Type a correct pokemon"),Object(o.a)("li",{parentName:"ol"},"Notice it doesn\u2019t show that new pokemon\u2019s information")),Object(o.a)("p",null,"The reason this is happening is because the ",Object(o.a)("inlineCode",{parentName:"p"},"error")," that\u2019s stored in the\ninternal state of the ",Object(o.a)("inlineCode",{parentName:"p"},"ErrorBoundary")," component isn\u2019t getting reset, so it\u2019s not\nrendering the ",Object(o.a)("inlineCode",{parentName:"p"},"children")," we\u2019re passing to it."),Object(o.a)("p",null,"So what we need to do is reset the ErrorBoundary\u2019s ",Object(o.a)("inlineCode",{parentName:"p"},"error")," state to ",Object(o.a)("inlineCode",{parentName:"p"},"null")," so it\nwill re-render. But how do we access the internal state of our ",Object(o.a)("inlineCode",{parentName:"p"},"ErrorBoundary"),"\nto reset it? Well, there are a few ways we could do this by modifying the\n",Object(o.a)("inlineCode",{parentName:"p"},"ErrorBoundary"),", but one thing you can do when you want to ",Object(o.a)("em",{parentName:"p"},"reset")," the state of\na component, is by providing it a ",Object(o.a)("inlineCode",{parentName:"p"},"key")," prop which can be used to unmount and\nre-mount a component."),Object(o.a)("p",null,"The ",Object(o.a)("inlineCode",{parentName:"p"},"key")," you can use? Try the ",Object(o.a)("inlineCode",{parentName:"p"},"pokemonName"),"!"),Object(o.a)("h3",{id:"6--use-react-error-boundary"},"6. \ud83d\udcaf use react-error-boundary"),Object(o.a)("p",null,Object(o.a)("a",{parentName:"p",href:"https://react-hooks.netlify.app/isolated/final/06.extra-6.js"},"Production deploy")),Object(o.a)("p",null,"As cool as our own ",Object(o.a)("inlineCode",{parentName:"p"},"ErrorBoundary")," is, I\u2019d rather not have to maintain it in the\nlong-term. Luckily for us, there\u2019s an npm package we can use instead and it\u2019s\nalready installed into this project. It\u2019s called\n",Object(o.a)("a",{parentName:"p",href:"https://github.com/bvaughn/react-error-boundary"},Object(o.a)("inlineCode",{parentName:"a"},"react-error-boundary")),"."),Object(o.a)("p",null,"Go ahead and give that a look and swap out our own ",Object(o.a)("inlineCode",{parentName:"p"},"ErrorBoundary")," for the one\nfrom ",Object(o.a)("inlineCode",{parentName:"p"},"react-error-boundary"),"."),Object(o.a)("h3",{id:"7--reset-the-error-boundary"},"7. \ud83d\udcaf reset the error boundary"),Object(o.a)("p",null,Object(o.a)("a",{parentName:"p",href:"https://react-hooks.netlify.app/isolated/final/06.extra-7.js"},"Production deploy")),Object(o.a)("p",null,"You may have noticed a problem with the way we\u2019re resetting the internal state\nof the ",Object(o.a)("inlineCode",{parentName:"p"},"ErrorBoundary")," using the ",Object(o.a)("inlineCode",{parentName:"p"},"key"),". Unfortunately, we\u2019re not only\nre-mounting the ",Object(o.a)("inlineCode",{parentName:"p"},"ErrorBoundary"),", we\u2019re also re-mounting the ",Object(o.a)("inlineCode",{parentName:"p"},"PokemonInfo")," which\nresults in a flash of the initial \u201cSubmit a pokemon\u201d state whenever we change\nour pokemon."),Object(o.a)("p",null,"So let\u2019s backtrack on that and instead we\u2019ll use ",Object(o.a)("inlineCode",{parentName:"p"},"react-error-boundary"),"'s\n",Object(o.a)("inlineCode",{parentName:"p"},"resetErrorBoundary")," function (which will be passed to our ",Object(o.a)("inlineCode",{parentName:"p"},"ErrorFallback"),"\ncomponent) to reset the state of the ",Object(o.a)("inlineCode",{parentName:"p"},"ErrorBoundary"),' when the user clicks a "try\nagain" button.'),Object(o.a)("blockquote",null,Object(o.a)("p",{parentName:"blockquote"},"\ud83d\udcb0 feel free to open up the finished version by clicking the link in the app\nso you can get an idea of how this is supposed to work.")),Object(o.a)("p",null,"Once you have this button wired up, we need to react to this reset of the\n",Object(o.a)("inlineCode",{parentName:"p"},"ErrorBoundary"),"'s state by resetting our own state so we don\u2019t wind up\ntriggering the error again. To do this we can use the ",Object(o.a)("inlineCode",{parentName:"p"},"onReset")," prop of the\n",Object(o.a)("inlineCode",{parentName:"p"},"ErrorBoundary"),". In that function we can simply ",Object(o.a)("inlineCode",{parentName:"p"},"setPokemonName")," to an empty\nstring."),Object(o.a)("h3",{id:"8--use-resetkeys"},"8. \ud83d\udcaf use resetKeys"),Object(o.a)("p",null,Object(o.a)("a",{parentName:"p",href:"https://react-hooks.netlify.app/isolated/final/06.extra-8.js"},"Production deploy")),Object(o.a)("p",null,"Unfortunately now the user can\u2019t simply select a new pokemon and continue with\ntheir day. They have to first click \u201cTry again\u201d and then select their new\npokemon. I think it would be cooler if they can just submit a new ",Object(o.a)("inlineCode",{parentName:"p"},"pokemonName"),"\nand the ",Object(o.a)("inlineCode",{parentName:"p"},"ErrorBoundary")," would reset itself automatically."),Object(o.a)("p",null,"Luckily for us ",Object(o.a)("inlineCode",{parentName:"p"},"react-error-boundary")," supports this with the ",Object(o.a)("inlineCode",{parentName:"p"},"resetKeys")," prop.\nYou pass an array of values to ",Object(o.a)("inlineCode",{parentName:"p"},"resetKeys")," and if the ",Object(o.a)("inlineCode",{parentName:"p"},"ErrorBoundary")," is in an\nerror state and any of those values change, it will reset the error boundary."),Object(o.a)("p",null,"\ud83d\udcb0 Your ",Object(o.a)("inlineCode",{parentName:"p"},"resetKeys")," prop should be: ",Object(o.a)("inlineCode",{parentName:"p"},"[pokemonName]")),Object(o.a)("h2",{id:"-feedback"},"\ud83e\udd89 Feedback"),Object(o.a)("p",null,"Fill out\n",Object(o.a)("a",{parentName:"p",href:"https://ws.kcd.im/?ws=React%20Hooks%20%F0%9F%8E%A3&e=06%3A%20useEffect%3A%20HTTP%20requests&em="},"the feedback form"),"."))}c.isMDXComponent=!0;var i=function(){return[{id:"-your-notes",level:2,title:"\ud83d\udcdd Your Notes",children:[]},{id:"background",level:2,title:"Background",children:[]},{id:"exercise",level:2,title:"Exercise",children:[]},{id:"extra-credit",level:2,title:"Extra Credit",children:[{id:"1--handle-errors",level:3,title:"1. \ud83d\udcaf handle errors",children:[]},{id:"2--use-a-status",level:3,title:"2. \ud83d\udcaf use a status",children:[]},{id:"3--store-the-state-in-an-object",level:3,title:"3. \ud83d\udcaf store the state in an object",children:[]},{id:"4--create-an-errorboundary-component",level:3,title:"4. \ud83d\udcaf create an ErrorBoundary component",children:[]},{id:"5--re-mount-the-error-boundary",level:3,title:"5. \ud83d\udcaf re-mount the error boundary",children:[]},{id:"6--use-react-error-boundary",level:3,title:"6. \ud83d\udcaf use react-error-boundary",children:[]},{id:"7--reset-the-error-boundary",level:3,title:"7. \ud83d\udcaf reset the error boundary",children:[]},{id:"8--use-resetkeys",level:3,title:"8. \ud83d\udcaf use resetKeys",children:[]}]},{id:"-feedback",level:2,title:"\ud83e\udd89 Feedback",children:[]}]},l={}}}]);
//# sourceMappingURL=42.610dcd11.chunk.js.map